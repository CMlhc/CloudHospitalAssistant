<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cn.neuedu.his.mapper.JobScheduleMapper">
    <resultMap id="BaseResultMap" type="cn.neuedu.his.model.JobSchedule">
        <!--
          WARNING - @mbg.generated
        -->
        <id column="id" jdbcType="INTEGER" property="id"/>
        <result column="doctor_id" jdbcType="INTEGER" property="doctorId"/>
        <result column="registration_type_id" jdbcType="INTEGER" property="registrationTypeId"/>
        <result column="is_valid" jdbcType="BIT" property="isValid"/>
        <result column="limit_registration_amount" jdbcType="INTEGER" property="limitRegistrationAmount"/>
        <result column="period" jdbcType="INTEGER" property="period"/>
        <result column="create_time" jdbcType="TIMESTAMP" property="createTime"/>
        <result column="date" jdbcType="DATE" property="date"/>
    </resultMap>

    <update id="uodateHaveRegistration">
        <if test="limit_registration_amount>=have_registration_amount+1">
            update job_schedule set have_registration_amount=have_registration_amount+1 where
            to_days(date)=to_days(#{date}) and doctor_id=#{doctorId}
        </if>
    </update>

    <select id="getByDoctorId" resultMap="BaseResultMap">
        select *
        from job_schedule
        where to_days(date) = to_days(#{date})
          and doctor_id = #{doctorId}
    </select>

    <select id="getRegistrationInfo" resultType="INTEGER">
        select limit_registration_amount
        from job_schedule
        where doctor_id = #{doctorId}
          and TO_DATS(date) = TO_DATS(#{time})
    </select>

    <select id="getByDate" resultMap="BaseResultMap">
        select *
        from job_schedule
        where TO_DAYS(date) = TO_DAYS(#{date})
    </select>

    <resultMap id="scheduleInfo" type="cn.neuedu.his.model.JobSchedule">
        <id column="id" jdbcType="INTEGER" property="id"/>
        <result column="doctor_id" jdbcType="INTEGER" property="doctorId"/>
        <result column="registration_type_id" jdbcType="INTEGER" property="registrationTypeId"/>
        <result column="is_valid" jdbcType="BIT" property="isValid"/>
        <result column="limit_registration_amount" jdbcType="INTEGER" property="limitRegistrationAmount"/>
        <result column="period" jdbcType="INTEGER" property="period"/>
        <result column="create_time" jdbcType="TIMESTAMP" property="createTime"/>
        <result column="date" jdbcType="DATE" property="date"/>
        <association property="constantVariable" javaType="cn.neuedu.his.model.ConstantVariable" resultMap="Period"/>
        <association property="user" javaType="cn.neuedu.his.model.User"
                     resultMap="cn.neuedu.his.mapper.UserMapper.BaseResultMap"/>
        <association property="doctor" javaType="cn.neuedu.his.model.Doctor" resultMap="doctorAndTitle"/>
        <association property="registrationType" javaType="cn.neuedu.his.model.RegistrationType"
                     resultMap="cn.neuedu.his.mapper.RegistrationTypeMapper.BaseResultMap"/>
    </resultMap>

    <resultMap id="doctorAndTitle" type="cn.neuedu.his.model.Doctor">
        <id column="id" jdbcType="INTEGER" property="id"/>
        <result column="title_id" jdbcType="INTEGER" property="titleId"/>
        <result column="can_arrange" jdbcType="BIT" property="canArrange"/>
        <association property="titleName" javaType="java.lang.String" select="getTitle" column="title_id"/>
    </resultMap>

    <resultMap id="Period" type="cn.neuedu.his.model.ConstantVariable">
        <!--
          WARNING - @mbg.generated
        -->
        <id column="id" jdbcType="INTEGER" property="id"/>
        <result column="periodName" jdbcType="VARCHAR" property="name"/>
        <result column="type" jdbcType="INTEGER" property="type"/>
    </resultMap>

    <select id="getScheduleByPeriod" resultMap="scheduleInfo">
        select j.*, c.id,c.name as periodName,c.type, d.*, u.*, r.* from job_schedule j join doctor d on doctor_id =
        d.id
        join user u on j.doctor_id = u.id
        join registration_type r on j.registration_type_id = r.id
        join constant_variable c on c.id = j.period
        where u.department_id = #{departmentId} and TO_DAYS(date) = TO_DAYS(#{date}) and (period = 302 or period = 303
        <if test='hour &lt; 12'>
            or period = 301
        </if>
        ) order by r.display_sequence_number desc
    </select>

    <select id="getScheduleByMonth" resultMap="scheduleInfo">
        select j.*, c.id, c.name as periodName, c.type, d.*, u.*, r.*
        from job_schedule j
                 join doctor d on doctor_id = d.id
                 join user u on j.doctor_id = u.id
                 join registration_type r on j.registration_type_id = r.id
                 join constant_variable c on c.id = j.period
        where u.department_id = #{departmentId}
          and date_format(date, '%Y-%m') = date_format(#{date}, '%Y-%m')
        order by r.display_sequence_number
            desc
    </select>

    <select id="getTitle" resultType="java.lang.String">
        select name
        from constant_variable
        where id = #{title_id}
    </select>

    <delete id="removeByDate">
        delete
        from job_schedule
        where datediff(date, #{date}) = 0
    </delete>
</mapper>

