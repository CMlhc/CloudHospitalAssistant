<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cn.neuedu.his.mapper.PatientMapper">
    <resultMap id="BaseResultMap" type="cn.neuedu.his.model.Patient">
        <!--
          WARNING - @mbg.generated
        -->
        <id column="id" jdbcType="INTEGER" property="id"/>
        <result column="identity_id" jdbcType="VARCHAR" property="identityId"/>
        <result column="password" jdbcType="VARCHAR" property="password"/>
        <result column="sex" jdbcType="BIT" property="sex"/>
        <result column="real_name" jdbcType="VARCHAR" property="realName"/>
        <result column="username" jdbcType="VARCHAR" property="username"/>
        <result column="last_login_time" jdbcType="TIMESTAMP" property="lastLoginTime"/>
        <result column="create_time" jdbcType="TIMESTAMP" property="createTime"/>
        <result column="last_password_modify_time" jdbcType="TIMESTAMP" property="lastPasswordModifyTime"/>
    </resultMap>

<!--    患者所有缴费单（可能带时间）-->
    <resultMap id="patientAndAllPayment" type="cn.neuedu.his.model.Patient">
        <id column="id" jdbcType="INTEGER" property="id"/>
        <result column="identity_id" jdbcType="VARCHAR" property="identityId"/>
        <result column="password" jdbcType="VARCHAR" property="password"/>
        <result column="sex" jdbcType="BIT" property="sex"/>
        <result column="real_name" jdbcType="VARCHAR" property="realName"/>
        <result column="username" jdbcType="VARCHAR" property="username"/>
        <result column="last_login_time" jdbcType="TIMESTAMP" property="lastLoginTime"/>
        <result column="create_time" jdbcType="TIMESTAMP" property="createTime"/>
        <result column="last_password_modify_time" jdbcType="TIMESTAMP" property="lastPasswordModifyTime"/>
        <collection property="paymentList" ofType="cn.neuedu.his.model.Payment" column="{patientId = id, start = start, end = end}" select="getAllPayment"/>
    </resultMap>

    <select id="getPatientAndAllPayment" resultMap="patientAndAllPayment">
        select *, #{startDate} as start, #{endDate} as end from patient where patient.id = #{id}
    </select>

    <select id="getAllPayment" resultMap="cn.neuedu.his.mapper.PaymentMapper.BaseResultMap">
        select * from payment where patient_id = #{patientId}
        <if test="start != null">
            and payment.create_time <![CDATA[  >=  ]]> #{start}
        </if>
        <if test="end != null">
            and payment.create_time <![CDATA[  <=  ]]> #{end}
        </if>
    </select>



    <!--  患者及其所有未付款缴费单-->
    <resultMap id="patientAndNotPaidPayment" type="cn.neuedu.his.model.Patient">
        <id column="id" jdbcType="INTEGER" property="id"/>
        <result column="identity_id" jdbcType="VARCHAR" property="identityId"/>
        <result column="password" jdbcType="VARCHAR" property="password"/>
        <result column="sex" jdbcType="BIT" property="sex"/>
        <result column="real_name" jdbcType="VARCHAR" property="realName"/>
        <result column="username" jdbcType="VARCHAR" property="username"/>
        <result column="last_login_time" jdbcType="TIMESTAMP" property="lastLoginTime"/>
        <result column="create_time" jdbcType="TIMESTAMP" property="createTime"/>
        <result column="last_password_modify_time" jdbcType="TIMESTAMP" property="lastPasswordModifyTime"/>
        <collection property="paymentList" ofType="cn.neuedu.his.model.Payment" select="getNotPaidPayment" column="{patientId = id, paymentState = paymentState}"/>
    </resultMap>

    <select id="getPatientAndPaymentByState" resultMap="patientAndNotPaidPayment">
        select *, #{state} as paymentState from patient where id = #{patientId}
    </select>

    <select id="getNotPaidPayment" resultMap="cn.neuedu.his.mapper.PaymentMapper.BaseResultMap">
        select * from payment
        where patient_id = #{patientId} and is_frozen = false and state = #{paymentState} and is_frozen = false
        order by create_time desc
    </select>



    <!--  患者信息及所有还未消费的缴费单-->
    <resultMap id="patientAndNotConsumePayment" type="cn.neuedu.his.model.Patient">
        <id column="id" jdbcType="INTEGER" property="id"/>
        <result column="identity_id" jdbcType="VARCHAR" property="identityId"/>
        <result column="password" jdbcType="VARCHAR" property="password"/>
        <result column="sex" jdbcType="BIT" property="sex"/>
        <result column="real_name" jdbcType="VARCHAR" property="realName"/>
        <result column="username" jdbcType="VARCHAR" property="username"/>
        <result column="last_login_time" jdbcType="TIMESTAMP" property="lastLoginTime"/>
        <result column="create_time" jdbcType="TIMESTAMP" property="createTime"/>
        <result column="last_password_modify_time" jdbcType="TIMESTAMP" property="lastPasswordModifyTime"/>
        <collection property="paymentList" ofType="cn.neuedu.his.model.Payment" select="getNotConsumePayment" column="{patientId = id, noPaymentTotalTypeId = noPaymentTotalTypeId}"/>
    </resultMap>

    <select id="getPatientAndNotConsumePayment" resultMap="patientAndNotConsumePayment">
        select *, #{noPaymentTotalTypeId} as noPaymentTotalTypeId from patient where id = #{patientId}
    </select>

    <select id="getNotConsumePayment" resultMap="cn.neuedu.his.mapper.PaymentMapper.BaseResultMap">
        select *
        from payment
        where patient_id = #{patientId}
          and (select type from payment_type where payment_type_id = payment_type.id) != #{noPaymentTotalTypeId}
        order by create_time desc
    </select>



    <!--  根据状态及缴费类型获取患者和药物信息-->
    <resultMap id="patientAndPaymentByTypeAndState" type="cn.neuedu.his.model.Patient">
        <id column="id" jdbcType="INTEGER" property="id"/>
        <result column="identity_id" jdbcType="VARCHAR" property="identityId"/>
        <result column="password" jdbcType="VARCHAR" property="password"/>
        <result column="sex" jdbcType="BIT" property="sex"/>
        <result column="real_name" jdbcType="VARCHAR" property="realName"/>
        <result column="username" jdbcType="VARCHAR" property="username"/>
        <result column="last_login_time" jdbcType="TIMESTAMP" property="lastLoginTime"/>
        <result column="create_time" jdbcType="TIMESTAMP" property="createTime"/>
        <result column="last_password_modify_time" jdbcType="TIMESTAMP" property="lastPasswordModifyTime"/>
        <collection property="paymentList" ofType="cn.neuedu.his.model.Payment" select="getPaymentByTypeAndState" column="{patientId = id, paymentTotalTypeId = paymentTotalTypeId, state = state, , start = start, end = end}"/>
    </resultMap>

    <resultMap id="paymentAndPrescriptionByTypeAndState" type="cn.neuedu.his.model.Payment">
        <id column="id" jdbcType="INTEGER" property="id"/>
        <result column="quantity" jdbcType="INTEGER" property="quantity" />
        <result column="unit_price" jdbcType="DECIMAL" property="unitPrice" />
        <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
        <result column="operator_id" jdbcType="INTEGER" property="operatorId" />
        <result column="patient_id" jdbcType="INTEGER" property="patientId" />
        <result column="settlement_type_id" jdbcType="INTEGER" property="settlementTypeId" />
        <result column="payment_type_id" jdbcType="INTEGER" property="paymentTypeId" />
        <result column="item_id" jdbcType="INTEGER" property="itemId" />
        <result column="invoice_id" jdbcType="INTEGER" property="invoiceId" />
        <result column="state" jdbcType="INTEGER" property="state" />
        <result column="project_operator_id" jdbcType="INTEGER" property="projectOperatorId"/>
        <result column="is_frozen" jdbcType="BIT" property="isFrozen" />
        <result column="doctor_id" jdbcType="INTEGER" property="doctorId"/>
        <association property="prescription" javaType="cn.neuedu.his.model.Prescription" column="item_id" select="getPrescriptionAndDrug"/>
    </resultMap>

    <resultMap id="prescriptionAndDrug" type="cn.neuedu.his.model.Prescription">
        <id column="id" jdbcType="INTEGER" property="id" />
        <result column="usage_id" jdbcType="INTEGER" property="usageId" />
        <result column="item_id" jdbcType="INTEGER" property="itemId" />
        <result column="frequency" jdbcType="VARCHAR" property="frequency" />
        <result column="drug_id" jdbcType="INTEGER" property="drugId" />
        <result column="amount" jdbcType="INTEGER" property="amount" />
        <result column="days" jdbcType="INTEGER" property="days" />
        <result column="use_amount" jdbcType="VARCHAR" property="useAmount" />
        <result column="note" jdbcType="VARCHAR" property="note" />
        <result column="need_skin_test" jdbcType="BIT" property="needSkinTest" />
        <result column="skin_test_result" jdbcType="BIT" property="skinTestResult" />
        <result column="is_template" jdbcType="BIT" property="isTemplate"/>
        <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
        <result column="fee_type_id" jdbcType="INTEGER" property="feeTypeId"/>
        <association property="drug" javaType="cn.neuedu.his.model.Drug"/>
    </resultMap>


    <select id="getPatientAndDrugByTypeAndState" resultMap="patientAndPaymentByTypeAndState">
        select *, #{paymentTotalTypeId} as paymentTotalTypeId, #{state} as state, #{startDate} as start, #{endDate} as end
         from patient where id = #{patientId}
    </select>

    <select id="getPaymentByTypeAndState" resultMap="paymentAndPrescriptionByTypeAndState">
        select *
        from payment
        where patient_id = #{patientId}
          and (select type from payment_type pt where payment_type_id = pt.id) = #{paymentTotalTypeId}
          and state = #{state}
        <if test="start != null">
            and datediff(payment.create_time, #{start}) &gt;= 0
        </if>
        <if test="end != null">
            and datediff(payment.create_time, #{end}) &lt;= 0
        </if>
        order by create_time desc
    </select>

    <select id="getPrescriptionAndDrug" resultMap="prescriptionAndDrug">
        select * from prescription p join drug d on p.drug_id = d.id where p.id = #{item_id}
    </select>




    <!--根据身份证号模糊查询获得病人-->
    <select id="getPatientByIdentifyId" resultMap="BaseResultMap">
        select *
        from patient
        where identity_id like concat('%', #{identifyId}, '%')
    </select>
    <!--根据姓名来模糊查询获得病人姓名-->
    <select id="getPatientByName" resultMap="BaseResultMap">
        select *
        from patient
        where real_name like concat('%', #{name}, '%')
    </select>

    <select id="selectPatientByPhone" resultMap="BaseResultMap">
        select *
        from patient
        where phone_number like concat('%', #{phoneNumber}, '%')
    </select>

    <select id="selectPatientByIdentifyIdAndNameAndPhone" resultMap="BaseResultMap">
        select *
        from patient
        where identity_id like concat('%', #{identifyId}, '%')
          and real_name like concat('%', #{name}, '%')
          and phone_number like concat('%', #{phone}, '%')
    </select>
</mapper>